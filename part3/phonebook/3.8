const express = require('express')
const app = express()
const morgan = require('morgan')

const requestLogger = (request, response, next) => {
    console.log('Method:', request.method)
    console.log('Path: ', request.path)
    console.log('Body: ', request.body)
    console.log('---')
    next()
}

app.use(morgan(':method :url :body'))
app.use(express.json())
app.use(requestLogger)

let persons = [
    { 
      "id": 1,
      "name": "Arto Hellas", 
      "number": "040-123456"
    },
    { 
      "id": 2,
      "name": "Ada Lovelace", 
      "number": "39-44-5323523"
    },
    { 
      "id": 3,
      "name": "Dan Abramov", 
      "number": "12-43-234345"
    },
    { 
      "id": 4,
      "name": "Mary Poppendieck", 
      "number": "39-23-6423122"
    }
]

app.get('/info', (request, response) => {
    response.send(
        `<p>Phonebook has info for ${persons.length} people</p>
        <p>${new Date()}</p>`
    )
})

app.get('/api/persons', (request, response) => {
    response.send(persons)
})

app.get('/api/persons/:id', (request, response) => {
    const id = Number(request.params.id)
    const person = persons.find(note => note.id === id)

    if (person) {
        response.json(person)
    } else {
        response.status(404).end("Entry does not exist")
    }
})

app.delete('/api/persons/:id', (request, response) => {
    const id = Number(request.params.id)
    const person = persons.filter(note => note.id === id)
    console.log("Entry deleted")
    response.status(204).end("Entry was deleted")
})

const generateId = () => {
    const maxId = persons.length > 0
        ? Math.floor(Math.random() * 1000)
        : 0
    return maxId
}   

app.post('/api/persons', (request, response) => {
    const body = request.body
    console.log('this is the body', body)

    if (!body.name || !body.number) {
        return response.status(400).json({
            error: !body.name ? 'Name is missing' : 'Number is missing'
        })
    }

    for (let name of persons) {
        console.log('this is the name', name)
        if (name.name === body.name) {
            return response.status(400).json({
                error: `${body.name} is already in database`
            })
        }
    }

    const person = {
        id: generateId(),
        name: body.name,
        number: body.number,
    }
    console.log('this is the person', person)

    persons = persons.concat(person)
    response.json(person)
    morgan.token('body', request => JSON.stringify(request.body))
})

const PORT = 3001
app.listen(PORT, () => {
    console.log(`server running on port ${PORT}`)
})
