import { useState, useEffect } from 'react'
import noteService from './services/countries'


const Notification = ({ error }) => {
  if (error === null ) {
    return null
  }
  return ( 
    <div className='error'>
      {error}
    </div>
  )
}

const CountryData = (props) => {
  return (
    <div>
        <h2 key={props.country.name.common}>
          {props.country.name.common}
        </h2>
        <span>
          capital {props.country.capital} <br />
          area {props.country.area}
        </span>
        <h4>languages:</h4>
        <ul>
        {Object.values(props.country.languages).map(language => (
          <li key={language}>
            {language}
          </li>
        ))}
        </ul>
        <img src={props.country.flags.png} alt="Flag"/>
      </div>
  )
}

const ResultEntry = ({ country, showData, onToggleShowData }) => (
  <span>
    {country.name.common}
    <button onClick={onToggleShowData}>{showData ? 'Hide Data': 'Show Data'}</button>
    {showData ? <CountryData country={country} /> : null }
    <br />
  </span>
)

const Weather = (props) => {
  const api_key = import.meta.env.VITE_SOME_KEY
  const lat = props.country.capitalInfo.latlng[0]
  const lon = props.country.capitalInfo.latlng[1]
  const [weather, setWeather] = useState('')
  

  useEffect(() => {
    const weatherApi = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${api_key}`

    noteService
      .getAll(weatherApi)
      .then(response => {
        console.log('THE WEATHER EFFECT PROMISE', response)
        setWeather(response)
    })
  }, [])
  
  const temp = Math.round(((weather?.main?.temp - 273.15) * 100) / 100).toFixed(2)
  const wind = weather?.wind?.speed
  const icon = (weather.weather && weather.weather[0].icon)

  return (
    <div>
      <h2>Weather in {props.country.capital}</h2>
      <p>temperature {temp} Celsius</p>
      <img src={`https://openweathermap.org/img/wn/${icon}@2x.png`}/>
      <p>wind {wind} ms/</p>
    </div>
  )
}

const Results = ({ message, error }) => {
  const [showData, setShowData] = useState(message.map(() => false))

  const toggleShowData = (index) => {
    setShowData(prevShowData => {
      const updatedVisibility = [...prevShowData]
      updatedVisibility[index] = !updatedVisibility[index]
      return updatedVisibility
    })
  }

  return (
    <div>
      <Notification error={error} />
      {message.length === 1 && message[0].name.official 
        ? (
        <div>  
        <CountryData country={message[0]} />
        <Weather country={message[0]}/>
        </div>
      ) : (
        message.map((country, index) => (
          <ResultEntry
            key={index}
            country={country}
            showData={showData[index]}
            onToggleShowData={() => toggleShowData(index)}
          />
        ))
      )}
    </div>
  )
}

const Search = () => {
  const [input, setInput] = useState('Finland')
  const [countries, setCountries] = useState([])
  const [message, setMessage] = useState([])
  const [error, setError] = useState(null)

  useEffect(() => {
    noteService
      .getAll()
      .then(response => {
        console.log('effect promise fulfilled', response)
        setCountries(response)
    })
  }, [])

  const submitCountry = (event) => {
    event.preventDefault()
    const regex = new RegExp(input.toLowerCase(), 'i')
    const filteredData = countries.filter(country => regex.test(country.name.common))
    setMessage([])
    if (input === '') {
      console.log('empty input')
      setError('Please enter a value')
    } else if (filteredData.length >= 10) {
      console.log(`country with '${input}' exists in database, but there are 10 or more matches`)
      setError(`country with '${input}' in name exists in database, but there are 10 or more matches`)
    } else if (filteredData.length === 0) {
      console.log("no countries")
      setError(`No countries exist with "${input}" in name`)
    } else if (filteredData.length === 1) {
      console.log("ONLY ONE COUNTRY")
      setMessage(filteredData)
      setError(null)
    } else {
      console.log(`country with '${input}' exists in database`, filteredData)
      setMessage(filteredData)
      setError(null)
    }
  }

  const handleInputChange = (event) => {
    console.log(event.target.value)
    setInput(event.target.value)
  }

  return (
    <div>
      <form onSubmit={submitCountry}>
        find countries <input value={input} onChange={handleInputChange}></input>
      </form>
      <Results message={message} error={error}/>
    </div>
  )
}

const App = () => {
  return (
    <div>
      <Search />
    </div>
  )
}

export default App
